# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dist_numpy_relation_store_pb2 as dist__numpy__relation__store__pb2
import ndarray_pb2 as ndarray__pb2


class DistNumpyRelationStoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_edge_ids = channel.unary_stream(
                '/graph2tensor.client.DistNumpyRelationStore/get_edge_ids',
                request_serializer=dist__numpy__relation__store__pb2.BatchingProto.SerializeToString,
                response_deserializer=dist__numpy__relation__store__pb2.EdgeIdsProto.FromString,
                )
        self.get_edge_probs = channel.unary_stream(
                '/graph2tensor.client.DistNumpyRelationStore/get_edge_probs',
                request_serializer=dist__numpy__relation__store__pb2.BatchingProto.SerializeToString,
                response_deserializer=ndarray__pb2.NdarrayProto.FromString,
                )
        self.sample_all_neighbors = channel.unary_unary(
                '/graph2tensor.client.DistNumpyRelationStore/sample_all_neighbors',
                request_serializer=dist__numpy__relation__store__pb2.SamplingRequest.SerializeToString,
                response_deserializer=dist__numpy__relation__store__pb2.HopProto.FromString,
                )
        self.sample_topk_neighbors = channel.unary_unary(
                '/graph2tensor.client.DistNumpyRelationStore/sample_topk_neighbors',
                request_serializer=dist__numpy__relation__store__pb2.SamplingRequest.SerializeToString,
                response_deserializer=dist__numpy__relation__store__pb2.HopProto.FromString,
                )
        self.sample_neighbors_randomly = channel.unary_unary(
                '/graph2tensor.client.DistNumpyRelationStore/sample_neighbors_randomly',
                request_serializer=dist__numpy__relation__store__pb2.SamplingRequest.SerializeToString,
                response_deserializer=dist__numpy__relation__store__pb2.HopProto.FromString,
                )
        self.random_walk = channel.unary_unary(
                '/graph2tensor.client.DistNumpyRelationStore/random_walk',
                request_serializer=dist__numpy__relation__store__pb2.WalkRequest.SerializeToString,
                response_deserializer=dist__numpy__relation__store__pb2.PathsProto.FromString,
                )
        self.node2vec_walk = channel.unary_unary(
                '/graph2tensor.client.DistNumpyRelationStore/node2vec_walk',
                request_serializer=dist__numpy__relation__store__pb2.WalkRequest.SerializeToString,
                response_deserializer=dist__numpy__relation__store__pb2.PathsProto.FromString,
                )


class DistNumpyRelationStoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_edge_ids(self, request, context):
        """get the src_ids, dst_ids & edge_ids of edges
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_edge_probs(self, request, context):
        """get the probabilities of edges
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sample_all_neighbors(self, request, context):
        """sample all neighbors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sample_topk_neighbors(self, request, context):
        """sample K neighbors with highest edge probabilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sample_neighbors_randomly(self, request, context):
        """sample neighbors randomly with/without replacement
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def random_walk(self, request, context):
        """random walk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def node2vec_walk(self, request, context):
        """node2vec walk
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistNumpyRelationStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_edge_ids': grpc.unary_stream_rpc_method_handler(
                    servicer.get_edge_ids,
                    request_deserializer=dist__numpy__relation__store__pb2.BatchingProto.FromString,
                    response_serializer=dist__numpy__relation__store__pb2.EdgeIdsProto.SerializeToString,
            ),
            'get_edge_probs': grpc.unary_stream_rpc_method_handler(
                    servicer.get_edge_probs,
                    request_deserializer=dist__numpy__relation__store__pb2.BatchingProto.FromString,
                    response_serializer=ndarray__pb2.NdarrayProto.SerializeToString,
            ),
            'sample_all_neighbors': grpc.unary_unary_rpc_method_handler(
                    servicer.sample_all_neighbors,
                    request_deserializer=dist__numpy__relation__store__pb2.SamplingRequest.FromString,
                    response_serializer=dist__numpy__relation__store__pb2.HopProto.SerializeToString,
            ),
            'sample_topk_neighbors': grpc.unary_unary_rpc_method_handler(
                    servicer.sample_topk_neighbors,
                    request_deserializer=dist__numpy__relation__store__pb2.SamplingRequest.FromString,
                    response_serializer=dist__numpy__relation__store__pb2.HopProto.SerializeToString,
            ),
            'sample_neighbors_randomly': grpc.unary_unary_rpc_method_handler(
                    servicer.sample_neighbors_randomly,
                    request_deserializer=dist__numpy__relation__store__pb2.SamplingRequest.FromString,
                    response_serializer=dist__numpy__relation__store__pb2.HopProto.SerializeToString,
            ),
            'random_walk': grpc.unary_unary_rpc_method_handler(
                    servicer.random_walk,
                    request_deserializer=dist__numpy__relation__store__pb2.WalkRequest.FromString,
                    response_serializer=dist__numpy__relation__store__pb2.PathsProto.SerializeToString,
            ),
            'node2vec_walk': grpc.unary_unary_rpc_method_handler(
                    servicer.node2vec_walk,
                    request_deserializer=dist__numpy__relation__store__pb2.WalkRequest.FromString,
                    response_serializer=dist__numpy__relation__store__pb2.PathsProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'graph2tensor.client.DistNumpyRelationStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DistNumpyRelationStore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_edge_ids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/graph2tensor.client.DistNumpyRelationStore/get_edge_ids',
            dist__numpy__relation__store__pb2.BatchingProto.SerializeToString,
            dist__numpy__relation__store__pb2.EdgeIdsProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_edge_probs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/graph2tensor.client.DistNumpyRelationStore/get_edge_probs',
            dist__numpy__relation__store__pb2.BatchingProto.SerializeToString,
            ndarray__pb2.NdarrayProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sample_all_neighbors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/graph2tensor.client.DistNumpyRelationStore/sample_all_neighbors',
            dist__numpy__relation__store__pb2.SamplingRequest.SerializeToString,
            dist__numpy__relation__store__pb2.HopProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sample_topk_neighbors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/graph2tensor.client.DistNumpyRelationStore/sample_topk_neighbors',
            dist__numpy__relation__store__pb2.SamplingRequest.SerializeToString,
            dist__numpy__relation__store__pb2.HopProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sample_neighbors_randomly(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/graph2tensor.client.DistNumpyRelationStore/sample_neighbors_randomly',
            dist__numpy__relation__store__pb2.SamplingRequest.SerializeToString,
            dist__numpy__relation__store__pb2.HopProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def random_walk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/graph2tensor.client.DistNumpyRelationStore/random_walk',
            dist__numpy__relation__store__pb2.WalkRequest.SerializeToString,
            dist__numpy__relation__store__pb2.PathsProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def node2vec_walk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/graph2tensor.client.DistNumpyRelationStore/node2vec_walk',
            dist__numpy__relation__store__pb2.WalkRequest.SerializeToString,
            dist__numpy__relation__store__pb2.PathsProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
